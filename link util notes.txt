.1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1
.1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2
.1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3
.1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4
.1.3.6.1.2.1.2.2.1.2.1 = STRING: "lo"
.1.3.6.1.2.1.2.2.1.2.2 = STRING: "eth0"
.1.3.6.1.2.1.2.2.1.2.3 = STRING: "eth1"
.1.3.6.1.2.1.2.2.1.2.4 = STRING: "bond0"

const string HEADER1 = "This program will search two SNMP walks and provide information from them.";
const string HEADER2 = "Please enter the number for the link you wish to calculate utilization for:";
const string INFILE1 = "walk1.txt";					// Hard-coded input file 1.
const string INFILE2 = "walk2.txt";					// Hard-coded input file 2.
const string SYSUPTIMEOID = ".1.3.6.1.2.1.1.3.0";			// The OID for sysUpTime.
const string IFINDEXOID = ".1.3.6.1.2.1.2.2.1.1.";		// The OID for ifIndex.
const string IFDESCROID = ".1.3.6.1.2.1.2.2.1.2.";		// The OID for ifDescr.
const string IFSPEEDOID = ".1.3.6.1.2.1.2.2.1.5.";		// The OID for ifSpeed.
const string IFINOCTETSOID = ".1.3.6.1.2.1.2.2.1.10.";		// The OID for ifInOctets.
const string IFINDISCARDSOID = ".1.3.6.1.2.1.2.2.1.13.";	// The OID for ifInDiscards.
const string IFINERRORSOID = ".1.3.6.1.2.1.2.2.1.14.";		// The OID for ifInErrors.
const string IFOUTOCTETSOID = ".1.3.6.1.2.1.2.2.1.16.";	// The OID for ifOutOctets.
const string IFOUTDISCARDSOID = ".1.3.6.1.2.1.2.2.1.19.";	// The OID for ifOutDiscards.
const string IFOUTERRORSOID = ".1.3.6.1.2.1.2.2.1.20.";	// The OID for ifOutErrors.
const int PRECISION = 3;								// The number of decimal places to show for floats.
const unsigned int COUNTER32MAX = 4294967295;			// The maximum value a Counter32 can hold.
//const long COUNTER64MAX = 18446744073709551615;			// The maximum value a Counter64 can hold.
const int ARRAYSIZE = 100000;							// The size of the array for the files.
const int	MAXINTERFACE = 2000;						// The maximum number of interfaces this program can deal with.
const int IGNORE = 4096;								// The number of characters to ignore from the cin buffer.

	// Create arrays to hold each file.
	string* walk1Array = new string[ARRAYSIZE];
	string* walk2Array = new string[ARRAYSIZE];

	// Create arrays to hold each ifIndex and ifDescr.
	string* walk1IndexDescr = new string[MAXINTERFACE];
	string* walk2IndexDescr = new string[MAXINTERFACE];

walk1Array[i].find( " = STRING: " )

walk1Array[i].substr( stringOffset + 11 )	// ifDescr as a string, reading from wherever " = STRING: " is found plus 11, to the end of the string.
walk1Array[i].substr( 21, ( stringOffset ) )	// ifIndex as a string, reading from position 11 to wherever " = STRING: " is found.
stoi( walk1Array[i].substr( 21, stringOffset ) ) ) << endl;	// ifIndex as an int, reading from position 21 to wherever " = STRING: " is found.



A pointer is just a variable that holds a memory address.



walk2Array should be passed to the function
stringOffset can be local to the function
the OID should be hard-coded to each function
the function should return the int or string

			// Search for ifDescr (.1.3.6.1.2.1.2.2.1.2.x).
			// The ifDescr is the text portion after " = STRING: ".
			if( walk2Array[i].find( IFDESCROID ) != string::npos )
			{
				// Since we found the OID, search for the text STRING: since we know the actual index is 9 characters ater this.
				if( ( stringOffset = walk2Array[i].find( " = STRING: " ) ) != string::npos )
				{
					// The actual description should be 11 characters after " = STRING: "
					//ifDescr = ( walk2Array[i].substr( stringOffset + 11 ) );
					
					// Put the description text into walk2IndexDescr[].
					walk2IndexDescr[stoi( walk2Array[i].substr( 21, stringOffset ) )] = ( walk2Array[i].substr( stringOffset + 11 ) );

					//Test code.
					//cout << "ifDescr in the file array: " << walk2Array[i].substr( stringOffset + 11 ) << endl;
					//cout << "ifIndex in the file array: " << stoi( walk2Array[i].substr( 21, stringOffset ) ) << endl;

					//Test code.
					//cout << "walk2IndexDescr: " << walk2IndexDescr[stoi( walk2Array[i].substr( 21, stringOffset ) )] << endl;

					// Set the Interface object ifIndex to the newly found index.
					//interface1.setDescr( ( ifDescr ) );
				}
			}

	//Test code.
	oidRead( walk1Array, 2, interface1, fileCount1, 1 );


	// Display the resultant Interface-class object.
	cout << "Class walk 1:\n\tifIndex: " << interface1.getIndex() << "\n\tifDescr: " << interface1.getDescr();
	cout << "\n\tifSpeed: " << interface1.getSpeed1() << "\n\tifInOctets: " << interface1.getInOctets1();
	cout << "\n\tifOutOctets: " << interface1.getOutOctets1() << endl;
	cout << endl;

	//Test code.
	cout << "Found " << indexCount << " interfaces in walk 1." << endl;



	//Test code.
	oidRead( walk2Array, 2, interface1, fileCount1, 2 );

	// Display the resultant Interface-class object.
	cout << "Class walk 2:\n\tifIndex: " << interface1.getIndex() << "\n\tifDescr: " << interface1.getDescr();
	cout << "\n\tifSpeed: " << interface1.getSpeed2() << "\n\tifInOctets: " << interface1.getInOctets2();
	cout << "\n\tifOutOctets: " << interface1.getOutOctets2() << endl;
	cout << endl;



	int ifIndex;				// The Interface Index: .1.3.6.1.2.1.2.2.1.1.*
	string ifDescr;			// The Interface Description: .1.3.6.1.2.1.2.2.1.2.*
	int ifSpeed1;				// The Interface Speed from the first walk.
	int ifSpeed2;				// The Interface Speed from the second walk.
	unsigned long ifInOctets1;	// The Interface Inbound Octet Count from the first walk.
	unsigned long ifInOctets2;	// The Interface Inbound Octet Count from the second walk.
	unsigned long ifOutOctets1;	// The Interface Outbound Octet Count from the first walk.
	unsigned long ifOutOctets2;	// The Interface Outbound Octet Count from the second walk.
	int ifOctetCounterSize1;		// The Interface Octet Size from the first walk.
	int ifOctetCounterSize2;		// The Interface Octet Size from the second walk.



Once we know the desired ifIndex, we can send that to a function with each array and the class object, and have the function populate the class object.



1. Print the introduction
2. List the PWD
3. Read first walk into array1
4. Read second walk into array2
5. List all interfaces to the user
	5.a. Load the ifDescr into a string array, with the string offset equal to the ifIndex.
6. Ask which interface to show stats for
7. Scan both arrays for the chosen interface, and create an Interface class object
8. Display stats from the Interface class object created for the chosen interface
9. Loop back to step 5.
